// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:ffi/ffi.dart' as ffiP;

class UsbEscPrinterWindowsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UsbEscPrinterWindowsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UsbEscPrinterWindowsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int print_data(
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffiP.Utf16> name,
  ) {
    return _print_data(
      data,
      length,
      name,
    );
  }

  late final _print_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffiP.Utf16>)>>('print_data');
  late final _print_data = _print_dataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffiP.Utf16>)>();
}

typedef LPTSTR = LPSTR;
typedef LPSTR = ffi.Pointer<CHAR>;
typedef CHAR = ffi.Char;
